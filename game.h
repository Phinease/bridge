//// Created by Phinease on 2019-02-11.//#ifndef BRIDGE_DATA_ANALYSE_GAME_H#define BRIDGE_DATA_ANALYSE_GAME_H#endif //BRIDGE_DATA_ANALYSE_GAME_H/* * Rule basic: card_num based on a base 13 * C/D/H/S(/N) -> 0/1/2/3(/4) * "2/3/4/5/6/7/8/9/T/J/Q/K/A" -> 0/1/2/3/4/5/6/7/8/9/10/11/12/13 * Player: * 'W','N','E','S' -> "West","North","East","South" -> 0/1/2/3 */#include "monte_carol.h"int Users_Nums[4][13],User_Unknown[4][39],Cards_played[4];int player_random[4]={-1,-1,-1,-1},card_using[13],cards_existing[52],win_rate[2]={0};int local_suit,process,game,winner,WE_tricks,NS_tricks;int *p_c_using=card_using;int simulation_times;int print_func[2]={1,1};int Backup1[4][13],Backup2[4][39];void initialization();void deal(int signal);void card(int num_user);void print_card(int num_user);void first_play_cards(int num_user);void play_card(int num_user);void wipe_card(int num_user,int c_num);void compare_cards();void show();void last_round();void tricks();void call_cards(int num_user);void congratulation(int winner);int win();void counting_cards();void clean_unknown(int num_card);void initialization(){    process=-1; WE_tricks=0; NS_tricks=0; winner=-1;    int i,k;    for(i=0;i<4;i++){        for(k=0;k<13;k++){            Users_Nums[i][k]=-1;        }        Cards_played[i]=-1;    }    for(i=0;i<52;i++){        cards_existing[i]=1;    }    for(i=0;i<4;i++){        for(k=0;k<39;k++){            User_Unknown[i][k]=-1;        }    }}void deal(int signal){    if(signal==1){        memcpy(Users_Nums,Backup1,sizeof(Backup1));        memcpy(User_Unknown,Backup2, sizeof(Backup2));        return;    }    int Poker[52],count[4]={0,0,0,0};    int order[4][13];    int num,i,q,k,t=0;    for(i=0;i<52;i++){        Poker[i]=i;    }    while (t<52){        do{            num=Poker[rand()%52];        }while(num==-1);        Users_Nums[t%4][count[t%4]++]=num;        Poker[num]=-1;        t++;    }    for(k=0;k<4;k++){        count[0]=0;        for(i=0;i<4;i++){            for(q=0;q<13;q++){                order[i][q]=-1;            }        }        for(i=0;i<13;i++){            num=Users_Nums[k][i];            order[num%4][num/4]=1;        }        for(i=0;i<4;i++){            for(q=0;q<13;q++){                if(order[i][q]==1){                    Users_Nums[k][count[0]++]=i+q*4;                }            }        }    }    if(game==1){        counting_cards();        //printf("Counting cards PAST.\n");    }    memcpy(Backup1,Users_Nums,sizeof(Users_Nums));    memcpy(Backup2,User_Unknown, sizeof(User_Unknown));}void wipe_card(int num_user,int c_num){    int i;    for(i=0;i<13;i++){        if(Users_Nums[num_user][i]==c_num){            Users_Nums[num_user][i]=-1;        }        card_using[i]=-1;    }}void call_cards(int num_user){    int i,q=0;    for(i=0;i<13;i++){        if(Users_Nums[num_user][i]!=-1){            card_using[q++]=Users_Nums[num_user][i];        }    }}void card(int num_user){    int i,num,count=1,line=0;    printf("Cards of %s:\n",Users_name[num_user]);    for(i=0;i<13;i++){        if(Users_Nums[num_user][i]!=-1){            num=Users_Nums[num_user][i];            if(num%4!=line){                printf("\n");                line++;            }            card_using[count-1]=Users_Nums[num_user][i];            printf("%d.%c%c\t",count++,Suits_name[num%4],Height[num/4]);        }    }    printf("\n\n");}void print_card(int num_user){    if(game==1){        card(num_user);    }else{        card((num_user+3)%4);        card((num_user+2)%4);        card((num_user+1)%4);        card(num_user);    }}void first_play_cards(int num_user){    int card;    local_suit = -1;    if(print_func[0]==1) {        tricks();        printf("Round%d -- First\n",process+1);        print_card(num_user);    }else{        call_cards(num_user);    }    if(player_random[num_user]==2) {        card = simulation(simulation_times,num_user);    }else{        card = random_player(p_c_using,1);        if(print_func[0]==1) printf("Random: %d\n\n",card+1);    }    local_suit=card_using[card]%4;    Cards_played[num_user]=card_using[card];    if(game==1) clean_unknown(card_using[card]);    wipe_card(num_user,Cards_played[num_user]);    //system("clear");    //system("clear");}void play_card(int num_user){    int i,q=0,card;    if(print_func[0]==1){        show();        printf("Round%d -- %s\n",process+1,Suits_fullname[local_suit]);        print_card(num_user);    }else{        call_cards(num_user);    }    if(player_random[num_user]==2) {        card = simulation(simulation_times,num_user);    }else{        card = random_player(p_c_using,0);        if(print_func[0]==1) printf("Random: %d\n\n",card+1);    }    if(card_using[card]%4==local_suit){        Cards_played[num_user]=card_using[card];        if(game==1) clean_unknown(card_using[card]);        wipe_card(num_user,Cards_played[num_user]);        //system("clear");        //system("clear");        return;    }else{        for(i=0;i<13;i++){            if(card_using[i]==-1) {                continue;            } else if(card_using[i]%4==local_suit){                q++;                //printf("card_using[%d].%d\n",i,card_using[i]);                break;            }        }    }    if(q!=0){        //system("clear");        printf("You can not lay out this card. Try again.\n");        printf("You played a %s %c, you have %d cards of %s,try again.\n\n",Suits_fullname[card_using[card]%4],Height[card_using[card]/4],q,Suits_fullname[local_suit]);        system("read -p 'Press Enter to continue...'");        play_card(num_user);        return;    } else{        Cards_played[num_user]=card_using[card];        if(game==1) clean_unknown(card_using[card]);        wipe_card(num_user,Cards_played[num_user]);        //system("clear");        //system("clear");    }}void compare_cards(){    int i,max=0;    int verified[4]={-1,-1,-1,-1};    for(i=0;i<4;i++){        if(Cards_played[i]%4==local_suit){            verified[i]=Cards_played[i]/4;        }    }    for(i=0;i<4;i++){        if(verified[i]>max){            max=verified[i];            winner=i;        }    }    if(print_func[0]==1) printf("%s has won.\n",Users_name[winner]);    for(i=0;i<4;i++){        Cards_played[i]=-1;    }    if (winner == 0 || winner == 2){        WE_tricks++;    } else if (winner == 1 || winner == 3){        NS_tricks++;    }}void show(){    int i;    printf("history: ");    for(i=0;i<4;i++){        if(Cards_played[i]!=-1){            printf("%c.%c%c\t",U_N[i],Suits_name[Cards_played[i]%4],Height[Cards_played[i]/4]);        }    }    printf("\n");}int win(){    if(WE_tricks>=7){        return 0;    }else{        return 1;    }}void congratulation(int winner){    tricks();    if(winner==1){        printf("Player Est and West win!!!\n");    }else if(winner==0){        printf("Player South and North win!!!\n");    }}void last_round(){    int i,k;    if(print_func[0]==1) printf("last round: ");    for(i=0;i<4;i++){        for(k=0;k<13;k++){            if(Users_Nums[i][k]!=-1){                if(i==winner) local_suit=Users_Nums[i][k]%4;                Cards_played[i]=Users_Nums[i][k];                if(print_func[0]==1) printf("%c.%c%c\t",U_N[i],Suits_name[Users_Nums[i][k]%4],Height[Users_Nums[i][k]/4]);            }        }    }    if(print_func[0]==1) printf("\n");    compare_cards();    //system("read -p 'Press Enter to continue...'");    //system("clear");    //system("clear");}void tricks(){    printf("WE %d\tNS %d\n",WE_tricks,NS_tricks);}void check(int user_num,float p,int w,int last_winner){    printf("%s Robot: %.2f%%\twinner: %s\n",Users_name[user_num],p,Users_name[w]);    printf("W: %c%c\t",Suits_name[Cards_played[0]%4],Height[Cards_played[0]/4]);    printf("N: %c%c\t",Suits_name[Cards_played[1]%4],Height[Cards_played[1]/4]);    printf("E: %c%c\t",Suits_name[Cards_played[2]%4],Height[Cards_played[2]/4]);    printf("S: %c%c\n",Suits_name[Cards_played[3]%4],Height[Cards_played[3]/4]);    printf("Last winner is %s\n",Users_name[last_winner]);    printf("Local: %s\n",Suits_fullname[local_suit]);    card(0); card(1); card(2); card(3);    system("read -p 'Press Enter to continue...'");}void counting_cards(){    int i,k,q;    int temp;    int global_cards_existing[4][52]={0};    int count[4]={0,0,0,0};    int order[4][39];    for(i=0;i<4;i++){        for(k=0;k<13;k++){            temp=Users_Nums[i][k];            global_cards_existing[i][temp]=1;        }    }    for(i=0;i<4;i++){        q=0;        for(k=0;k<52;k++){            if(global_cards_existing[i][k]==0){                User_Unknown[i][q++]=k;            }        }    }    for(k=0;k<4;k++){        count[0]=0;        for(i=0;i<4;i++){            for(q=0;q<39;q++){                order[i][q]=-1;            }        }        for(i=0;i<39;i++){            temp=User_Unknown[k][i];            order[temp%4][temp/4]=1;        }        for(i=0;i<4;i++){            for(q=0;q<13;q++){                if(order[i][q]==1){                    User_Unknown[k][count[0]++]=i+q*4;                }            }        }        //printf("User.%d %d cards.\n",k,count[0]);    }}void clean_unknown(int num_card){    int k,q;    int debug=0;    for(k=0;k<4;k++){        for(q=0;q<39;q++){            if(User_Unknown[k][q]==num_card){                User_Unknown[k][q]=-1;                debug++;                break;            }        }    }    /*    if(debug!=3){        printf("clean %d cards for %d\n",debug,num_card);        system("read -p 'Press Enter to continue...'");    }    */}